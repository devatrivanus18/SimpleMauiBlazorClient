@page "/"
@using SampleAPIMauiBlazorClient.Components.Layout
@inject AuthService AuthService
@inject NavigationManager _nm
@layout LoginLayout

<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>


<MudDialog Visible="true" Gutters="true" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h5">
            @_title
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12" sm="12" md="12">
                <MudTextField Required="true" RequiredError="wajib diisi" @bind-Value="@_username" Label="First Name" Variant="MudBlazor.Variant.Text"></MudTextField>
            </MudItem>
            <MudItem xs="12" sm="12" md="12">
                <MudTextField @bind-Value="_password" Label="Password" Variant="MudBlazor.Variant.Text" InputType="@(_isShowPassword ? InputType.Password : InputType.Text )" Adornment="Adornment.End" OnAdornmentClick="@(() => {_isShowPassword = !_isShowPassword;})" AdornmentIcon="@(_isShowPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility )" AdornmentAriaLabel="Show Password" />
            </MudItem>
            <MudItem xs="12" sm="12" md="12">
                <MudCheckBox @bind-Value="@_isRememberMe" Label="Remember Me" Color="Color.Primary"></MudCheckBox>
            </MudItem>
        </MudGrid>
        <MudGrid>
            <MudItem>
                <MudButton OnClick="@ProsesLogin" Variant="MudBlazor.Variant.Filled" Color="Color.Success" Class="px-10">Login</MudButton>
                <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Warning" Class="px-10">Close</MudButton>
            </MudItem>
        </MudGrid>
    </DialogContent>
</MudDialog>


@code{
    private readonly MudBlazor.DialogOptions _dialogOptions = new() { BackgroundClass = "my-custom-class", BackdropClick = false };

    public string? _username { get; set; }
    public string? _password { get; set; }
    public bool _isRememberMe { get; set; }
    public bool _isShowPassword { get; set; } = false;

    public string _title { get; set; } = "Please login first...";

    protected override async Task OnInitializedAsync()
    {
        var token = await SecureStorage.Default.GetAsync("authToken");
        if (!string.IsNullOrWhiteSpace(token))
        {
            _nm.NavigateTo("/home");
        }
        await base.OnInitializedAsync();
    }

    async void ProsesLogin()
    {
        if (!string.IsNullOrWhiteSpace(_username) && !string.IsNullOrWhiteSpace(_password))
        {
            var result = await AuthService.LoginAsync(_username, _password);

            if (result)
            {
                _nm.NavigateTo("/home");

            }
            else
            {
                _title = "Password atau username salah";
            }
            StateHasChanged();
        }
    }
}